
每日知识点记录

----------------------------------------------------------

开始时间
2020/01/10

有时候可能没时间，所以尽量一天记录一些吧

----------------------------------------------------------

2020/01/10 详细记录

----------------------------------------------------------

github 上传拉取 卡住不动
	https://www.ipaddress.com/
	查询 github.global.ssl.fastly.net 和 github.com 两个地址
	修改C:\Windows\System32\drivers\etc\hosts
	linux/mac执行sudo /etc/init.d/networking restart命令；
	windows在cmd中输入ipconfig /flushdns命令

上传图片
	https://www.cnblogs.com/fozero/p/8835628.html
        var formFile = new FormData();
        formFile.append("img", $('#upload').get(0).files[0]);

----------------------------------------------------------

2020/01/11 详细记录

----------------------------------------------------------

今天主要是做服务器的部署
使用之前的nginx和uwsgi配置
修改一些路径就可以配置好静态服务器和动态服务器了
主要的难点是守护进程 celery 
下面是一些参考资料
https://www.jianshu.com/p/9869cd1cbefe 配置
https://blog.csdn.net/qq_18863573/article/details/52437689
https://blog.csdn.net/sdafhkjas/article/details/102780983 解决错误

上线一些操作
设置路径
STATIC_ROOT = os.path.join(os.path.join(BASE_DIR, 'Jobs_web_django'), 'static')

收集静态文件
python manage.py collectstatic

收集依赖包
pip freeze > requirments.txt
安装依赖包
pip install -r requirments.txt

启动uWSGI
uwsgi --ini uwsgi.ini
ps -ef|grep uwsgi
关闭
uwsgi --stop uwsgi.pid
kill -9 n

开启nginx
nginx -c /var/www/Jobs_web_django/nginx.conf
关闭
nginx -s stop

上线服务器访问
http://49.234.125.109/

celery 配置
pip install supervisor
mkdir /etc/supervisor
echo_supervisord_conf > /etc/supervisor/supervisord.conf
mkdir supervisord.conf.d
cd supervisord.conf.d
touch celeryd_worker.conf

unlink /var/run/supervisor.sock
unlink /tmp/supervisor.sock

/root/.virtualenvs/jobenv/bin/supervisord -c supervisord.conf
supervisorctl status
supervisorctl update
supervisorctl reload
supervisorctl start all


----------------------------------------------------------

2020/01/13 详细记录

----------------------------------------------------------

修改charles的proxy配置，抓包手机访问
charles与爬虫的结合，APP爬取https需要ssl证书
需要手机root权限修改ssl证书，hash改名改目录为系统证书
参考资料
https://blog.csdn.net/ShadowySpirits/article/details/79756274

----------------------------------------------------------

2020/01/14 详细记录

----------------------------------------------------------

今天给博客增加了错误的工厂类，以及日志模块
以下是日志模块多线程解决的一些方案
https://www.jianshu.com/p/ab7fbe6f8f3c
https://www.jianshu.com/p/d615bf01e37b

下午增加了下猴子补丁的功能
通过增加models.Model的属性
再通过classmethod、装饰器等方法
在__init__上动态添加功能

linux上全局替换
grep -rl objects.get . --exclude-dir=lib | xargs sed 's/objects.get/get/g'

晚上学习了使用原始redis
修改原始redis，后台celery计算推荐的人存进redis
后面就从redis里面取值
rds.zrevrange('Hot-Rank', 0, config.TOP_N, withscores=True)
users = sorted(users, key=lambda user: uid_list.index(user.id))
rds.zincrby(config.HOT_RANK, config.LIKE_SCORE, keys.HOT_RANK_KEY % sid)

rds.sadd('%s' % user.id, *rcmd_user_id_list)
rds.srem('RCMD-%S' % request.user.id, sid)
rds.srandmember("", 10)

----------------------------------------------------------

2020/01/15 详细记录

----------------------------------------------------------

分布式数据库

范围拆分  //
 优点：扩容方便  缺点：分配不均衡
按余数拆分 %
 优点：分配均衡  缺点：扩容不方便

Mycat数据库分库分表中间件

主从、读写分离     写的命令发给主、读的命令发给从
master <- 写操作
 |
 V
slaver -> 读操作
slaver -> 读操作
slaver -> 读操作

程序实现或者第三方代理

服务高可用
 keepalived
 zookeeper
 服务器主挂，从接管
 1.备份
 2.故障转移
 3.交汇点，域名解析失败直接访问ip

ab 压力测试 服务器压力来自用户请求
 Ubuntu  
  apt-get install apache2-utils
  ab -n 1000 -c 3000 http://49.234.125.109/login/
  netstat -nat|grep 49.234.125.109
  ulimit -n
     多少次  并行
     -t 时间 -k keepalived

import socket
listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 建立SOCK连接
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR)  # 设置参数
listen_socket.bind((HOST, POST))  # 绑定 IP:端口
listen_socket.listen(100)  # 开始监听

while True:
    client_socket, client_address = listen_socket.accept()  # 接收客户端发起的连接请求
    request = client_socket.recv(1024) 

    http_response = RESPONSE
    client_socket.sendall(http_response)
    client_socket.close()
pip install gunicorn
pip install gevent
gunicorn -c Jobs_web_django/gunicorn_config.py Jobs_web_django.wsgi
ps aux|grep gunicorn

kill `cat logs/gunicorn.pid`

gunicorn 
 master只管理子进程
 多个worker

echo测试  整个系统最大性能  8000 r/s
curl http://49.234.125.109/login/

带缓存测试  3000 r/s
带数据库测试 300 r/s

Nginx 6W r/s

redis测试  11W r/s
redis-benchmark

服务器不要安装来历不明的包
下载包 apt install

cd ~/download/nginx-1.14.1
make clean 清除makefile
./config  检查并产生makefile
make    执行编译
make install

服务器远程登录
ssh root@xxx.xxx.xxx.xxx
ssh-keygen 产生  -t ed25519 指定算法
~/.ss/id_rsa.pub 公钥
~/.ss/id_rsa 私钥

cat ~/.ssh/authorized_keys

删除
rm -rf 

上传服务器
rsync -crvP  --exclude={.venv,.git,__pycache__,logs} ./  root@xxx.xxx.xxx.xxx:/opt/swiper/

Nginx 负载均衡 
 轮询
 权重
 IP Hash
 最小连接数

upstream app_server{
	server 127.0.0.1:9000 weight=10;
	server 127.0.0.1:9000 weight=10;
}

location / {
	
}

----------------------------------------------------------

2020/01/16 详细记录

----------------------------------------------------------

修改nginx负载均衡 Gunicorn和Uwsgi需要修改的地方不一样
https://segmentfault.com/a/1190000016108576

修改uwsgi服务器
Gunicorn作为uwsgi服务器的时候，使用gevent访问数据库会出错
如果不用gevent可以正常使用

shell脚本学习
 apt -get

服务器维护脚本

#!/bash/bin

# 系统更新
system_update(){
	echo '正在更新系统...'
	apt update -y
	apt upgrade -y
	echo -e '系统更新完毕\n'
}

# 安装系统软件
install_software(){
	echo '正在安装系统组件...'
	BASIC='man gcc make sudo lsof ssh openssl tree vim language-pack-zh-hans'
	EXT='dnsutils iputils-ping net-tools psmisc sysstat'
	NETWORK='curl telnet traceroute wget'
	LIBS='libbz2-dev libpcre3 libpcre3-dev libreadline-dev libssl-dev zliblg-dev'
	SOFTWARE='git mysql-server zip p7zip apache2-utils sendmail'
	apt install -y $BASIC $EXT $NETWORK $LIBS $SOFTWARE

	echo '正在清理临时文件'
	apt autoremove
	apt autoclean

	echo '正在设置中文环境'
	locale-gen zh_CN.UTF-8
	export LC_ALL='zh_CN.utf8'
	echo "export LC_ALL='zh_CN.utf8'" >> /etc/bash.bashrc

	echo '正在启动邮件服务'
	service sendmail start

	echo -e '系统组件安装完毕.\n'
}

# 安装Nginx   
# /dev/ 常用/dev/null   /dev/zero  /dev/random  /dev/urandom
# 设备文件
---
f = open('/dev/zero')  # 无限产生0 比如下载3G的文件，全为0
s = f.read(10) 
'\x00\x00\x00\x00\x00\x00\x00\x00'

伪随机 7 foo(7) -> 必然 9 foo(9) -> 71 -> 53 输入确定输出确定

---

install_nginx(){
	echo '正在安装Nginx...'
	if ! which nginx > /dev/null
	then
		wget -P /tmp 'http://nginx.org/download/nginx-1.14.1.tar.gz'
		tar -xzf /tmp/nginx-1.14.1.tar.gz -C /tmp
		cd /tmp/nginx-1.14.1
		./configure
		make
		make install
		cd -
		rm -rf /tmp/nginx*
		ln -s /usr/local/nginx/sbin/nginx /usr/lcal/bin/nginx
		echo -e 'Nginx 安装完毕'
	else
		echo -e 'Nginx 已存在.\n'
	fi
}

# 安装Redis
install_redis(){
	echo '正在安装 Redis'
	if ! which redis-server > /dev/null
	then
		wget -P /tmp/ 'http://download.redis.io/releases/redis-5.0.0.tar.gz'
		tar -xzf /tmp/redis-5.0.0.tar.gz -C /tmp
		cd /tmp/redis-5.0.0
		make && make install
		cd -
		rm -rf /tmp/redis*
		echo -e 'Redis 安装完毕.\n'
	else
		echo -e 'Redis 已存在 \n'
	fi
}

# 安装 pyenv
install_pyenv(){
	echo '正在安装pyenv...'
	if ! which pyenv > /dev/null
	then
		curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
		export PATH="$HOME/ .pyenv/bin:$PATH"
		eval "$(pyenv init -)"
		eval "$(pyenv virtualenv-init -)"
		echo -e 'pyenv 安装完毕. \n'
	else
		echo -e 'pyenv 已存在\n'
	fi
	pyenv update
}

# 将 pyenv 配置写入 bashrc
set_pyenv_conf(){
	echo '正在配置pyenv...'
	cat >> $HOME/ .bashrc << EOF

	# PyenvConfig
	export PATH="\$HOME/ .pyenv/bin:\$PATH"
	eval "\$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
	EOF
	source $HOME/ .bashrc
	echo -e 'pyenv 配置完毕. \n'
}

# 编译安装 Python 3.6.7
install_python(){
	echo '正在安装 Python 3.6'
	if ！ pyenv versions|grep 3.6.7 > /dev/null;
	then
		pyenv install -v 3.6.7
		echo -e 'Python 3.6.7 安装完毕.\n'
	else
		echo 'Python 3.6.7 已存在'
	fi
	pyenv global 3.6.7
}

# 项目环境初始化
project_init(){
	echo '正在设置项目环境...'
	proj='/opt/swiper'
	mkdir -p $proj/{backend.frontend.deployment.data.logs}

	echo '正在创建 python 运行环境...'
	if [ ! -d $proj/.venv ];
	then
		python -m venv $proj/.venv
	fi
	source $proj/.venv/bin/activate
	pip install -U pip
	if [ -f $proj/requirements.txt ]; then
		pip install -r $proj/requirements.txt
	fi
	deactivate

	echo -e '项目环境设置完毕. \n'
}

install_all(){
	system_update
	install_software
	install_naginx
	install_redis
	install_pyenv
	set_pyenv_conf
	install_python
	project_int
}

cat << EOF
....EOF

if [[ -n $1 ]];
then
	input=$1
	echo "执行操作: $1"
else
	read -p "请选择: " input
fi

case $input in
	1) system_update;;
	2) install_software;;
	3) install_nginx;;
	4) install_redis;;
	5) install_pyenv;;
	6) set_pyenv_conf;;
	7) install_python;;
	8) project_init;;
	9) install_all;;
	*) exit;;
esac

上传服务器脚本
upload.sh
---
#!/bin/bash

LOCAL_DIR='./'
REMOTE_DIR='/opt/swiper'

USER='root'
HOST='35.194.171.19'

rsync -crvpP  --exclude={.venv,.git,__pycache__,logs} $LOCAL_DIR/ $USER@$HOST:$REMOTE_DIR/

SSH $USER@$HOST '$REMOTE_DIR/scripts/restart.sh'
---

ssh root@35.193.172.19 'ls'
chmod 755 restart.sh
ls

开始结束脚本
---
start.sh
#！/bin/bash

PROJECT="/opt/swiper"
cd $PROJECT
source $PROJECT .venv/bin/activate
gunicorn -c swiper/gunicorn-config.py swiper.wsgi
deactivate
cd -
----
stop.sh
#!/bin/bash

PROJECT='/opt/swiper'

# 关掉 gunicorn
cat $PROJECT/logs/gunicorn.pid | xargs kill
----

不间断重启
软重启
restart.sh
#!/bin/bash

PROJECT='/opt/swiper'

cat $PROJECT/logs/gunicorn.pid | xargs kill -HUP

从近到远     http://49.234.125.109/api/travel/near_to_far/
价格从低到高     http://49.234.125.109/api/travel/cheap_to_expensive/
价格从高到低     http://49.234.125.109/api/travel/expensive_to_cheap/
评论从高到低     http://49.234.125.109/api/travel/common_more_to_less/
详情页数据     http://49.234.125.109/api/travel/detail/
智能排序     http://49.234.125.109/api/travel/smart_sort/

----------------------------------------------------------

2020/01/14 详细记录

----------------------------------------------------------
----------------------------------------------------------

2020/01/14 详细记录

----------------------------------------------------------
----------------------------------------------------------

2020/01/14 详细记录

----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------